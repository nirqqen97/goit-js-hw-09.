{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,QAASC,SAASC,cAAc,WAE7BF,QAAQG,iBAAiB,UAM9B,SAAuBC,GACrBA,EAAEC,iBACF,IAEmBC,EAAfF,EAAEG,cADJC,SAAWC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAE1BC,EAAWC,OAAOL,EAAMM,OACxBC,EAAUF,OAAOH,EAAKI,OACtBE,EAAYH,OAAOF,EAAOG,OAE5B,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAWC,IAEwBC,EAAvCD,EAAGL,GAAUO,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MAC3Ca,QAAQC,IAAI,uBAAwCC,OAAfH,EAAS,QAAYG,OAANf,EAAM,OAC1DZ,EAAA4B,OAAOC,QAAQ,uBAAwCF,OAAfH,EAAS,QAAYG,OAANf,EAAM,M,IAE9DkB,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUZ,EAAKW,EAALX,MAClBa,QAAQC,IAAI,sBAAuCC,OAAfH,EAAS,QAAYG,OAANf,EAAM,OACzDZ,EAAA4B,OAAOG,QAAQ,sBAAqCJ,OAAfH,EAAS,QAAYG,OAANf,EAAM,M,IAG5DG,GAAYG,EAGdZ,EAAEG,cAAcuB,O,IA3BhB,IAAIjB,EAAW,KACXG,EAAU,KACVC,EAAY,KA6BhB,SAASE,EAAcG,EAAUZ,GAC/B,OAAO,IAAIqB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACV,WAASZ,UAElBuB,EAAO,CAACX,WAASZ,S,GAElBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formRef: document.querySelector('.form')\n}\nrefs.formRef.addEventListener('submit',onHandleClick);\n\nlet delayVal = null;\nlet stepVal = null;\nlet amountVal = null;\n\nfunction onHandleClick(e) {\n  e.preventDefault();\n  const{\n    elements: {delay, step, amount},\n  } = e.currentTarget\n  delayVal = Number(delay.value);\n  stepVal = Number(step.value);\n  amountVal = Number(amount.value);\n  \nfor (let i = 0; i < amountVal; i++) {\n  // ----------тут должен быть создание промисов наверное уже завтра закончу\n  createPromise(i, delayVal).then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n\n  });\n  delayVal += stepVal;\n\n}\ne.currentTarget.reset()\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject)=>{\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({position,delay})\n      } else {\n        reject({position,delay})\n      }\n    }, delay);\n  })\n\n\n}\n"],"names":["$h6c0i","parcelRequire","formRef","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","$ce04d3a99e08e73b$var$delayVal","Number","value","$ce04d3a99e08e73b$var$stepVal","$ce04d3a99e08e73b$var$amountVal","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","console","log","concat","Notify","success","catch","failure","reset","Promise","resolve","reject","setTimeout","Math","random"],"version":3,"file":"03-promises.9352db2c.js.map"}